/*
 * 关于Scatter适配脚本注入
 * @Author: JohnTrump
 * @Date: 2018-09-28 16:38:16
 * @Last Modified by: JohnTrump
 * @Last Modified time: 2018-11-15 19:25:57
 */

export default {
    source: `'use strict';var _window$scatter;function _defineProperty(a,b,c){return b in a?Object.defineProperty(a,b,{value:c,enumerable:!0,configurable:!0,writable:!0}):a[b]=c,a}var meetBridge=null;window.scatter=(_window$scatter={isInject:!0,identity:null,requireVersion:'',publickKey:'',network:{fullhost:function fullhost(){return this.protocol+'://'+this.host+':'+this.port}},connect:function(){return Promise.resolve(!0)},strippedHost:function strippedHost(){var a=location.hostname;return 0===a.indexOf('www.')&&(a=a.replace('www.','')),a},signProvider:function signProvider(a){return meetBridge.invokeSignProvider({buf:Array.from(a.buf),transaction:a.transaction.actions}).then(function(b){return 0===b.code?b.data.signature:''}).catch(function(b){return b})},getIdentity:function getIdentity(){var a=this;return meetBridge.invokeAccountInfo().then(function(b){if(0===b.code){var d='active';b.data.isOwner&&(d='owner');var c={accounts:[{authority:d,blockchain:'eos',name:b.data.account}],publicKey:b.data.publicKey};return a.identity=c,c}return{}})},authenticate:function(){var b={from:this.identity.accounts[0].name,publicKey:this.identity.publicKey,signdata:this.strippedHost()};return meetBridge.invokeSignature({data:b.signdata}).then(function(c){return 0===c.code?c.data.signature:''}).catch(function(c){return c})},forgetIdentity:function forgetIdentity(){return this.identity=null,Promise.resolve()}},_defineProperty(_window$scatter,'requireVersion',function(b){this.requiredVersion=b}),_defineProperty(_window$scatter,'getArbitrarySignature',function(b,c,d,f){return d=d||'',f=f||!1,meetBridge.invokeSignature({data:c,whatfor:d,isHash:f,isArbitrary:!0}).then(function(g){return 0===g.code?g.data.signature:Promise.reject(g)})}),_defineProperty(_window$scatter,'useIdentity',function(b){this.identity=b,this.publicKey=this.identity?this.identity&&this.identity.publicKey:''}),_defineProperty(_window$scatter,'suggestNetwork',function(){return Promise.resolve(!0)}),_defineProperty(_window$scatter,'eos',function eos(a,b){var f=2<arguments.length&&arguments[2]!==void 0?arguments[2]:{},g=arguments[3];this.network=Object.assign(this.network,a),a.protocol||(a.protocol=g||'http');var c=a.protocol+'://'+a.host+':'+a.port,d=a.chainId;return b(Object.assign(f,{httpEndpoint:c,chainId:d,signProvider:this.signProvider}))}),_window$scatter),meetBridge=new MeetBridge,document.dispatchEvent(new CustomEvent('scatterLoaded'),{}),console.log('init meetBridge',meetBridge,scatter),scatter.getIdentity();`
}
