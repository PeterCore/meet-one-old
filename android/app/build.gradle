apply plugin: "com.android.application"

import com.android.build.OutputFile

/**
 * The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets
 * and bundleReleaseJsAndAssets).
 * These basically call `react-native bundle` with the correct arguments during the Android build
 * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the
 * bundle directly from the development server. Below you can see all the possible configurations
 * and their defaults. If you decide to add a configuration block, make sure to add it before the
 * `apply from: "../../node_modules/react-native/react.gradle"` line.
 *
 * project.ext.react = [
 *   // the name of the generated asset file containing your JS bundle
 *   bundleAssetName: "index.android.bundle",
 *
 *   // the entry file for bundle generation
 *   entryFile: "index.android.js",
 *
 *   // whether to bundle JS and assets in debug mode
 *   bundleInDebug: false,
 *
 *   // whether to bundle JS and assets in release mode
 *   bundleInRelease: true,
 *
 *   // whether to bundle JS and assets in another build variant (if configured).
 *   // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
 *   // The configuration property can be in the following formats
 *   //         'bundleIn${productFlavor}${buildType}'
 *   //         'bundleIn${buildType}'
 *   // bundleInFreeDebug: true,
 *   // bundleInPaidRelease: true,
 *   // bundleInBeta: true,
 *
 *   // whether to disable dev mode in custom build variants (by default only disabled in release)
 *   // for example: to disable dev mode in the staging build type (if configured)
 *   devDisabledInStaging: true,
 *   // The configuration property can be in the following formats
 *   //         'devDisabledIn${productFlavor}${buildType}'
 *   //         'devDisabledIn${buildType}'
 *
 *   // the root of your project, i.e. where "package.json" lives
 *   root: "../../",
 *
 *   // where to put the JS bundle asset in debug mode
 *   jsBundleDirDebug: "$buildDir/intermediates/assets/debug",
 *
 *   // where to put the JS bundle asset in release mode
 *   jsBundleDirRelease: "$buildDir/intermediates/assets/release",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in debug mode
 *   resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in release mode
 *   resourcesDirRelease: "$buildDir/intermediates/res/merged/release",
 *
 *   // by default the gradle tasks are skipped if none of the JS files or assets change; this means
 *   // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
 *   // date; if you have any other folders that you want to ignore for performance reasons (gradle
 *   // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
 *   // for example, you might want to remove it from here.
 *   inputExcludes: ["android/**", "ios/**"],
 *
 *   // override which node gets called and with what additional arguments
 *   nodeExecutableAndArgs: ["node"],
 *
 *   // supply additional arguments to the packager
 *   extraPackagerArgs: []
 * ]
 */

project.ext.react = [
        entryFile: "index.js"
]

apply from: "../../node_modules/react-native/react.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = true

android {
    //noinspection GroovyAssignabilityCheck
    compileSdkVersion 26
    //noinspection GroovyAssignabilityCheck
    buildToolsVersion rootProject.buildToolsVersion

    defaultConfig {
        applicationId "one.meet"
        //noinspection GroovyAssignabilityCheck
        minSdkVersion rootProject.minSdkVersion
        //noinspection GroovyAssignabilityCheck
        targetSdkVersion rootProject.targetSdkVersion
        multiDexEnabled true
        versionCode 38
        versionName "1.4.3"
        vectorDrawables.useSupportLibrary = true
        ndk {
            abiFilters "armeabi-v7a", "x86"
        }
        manifestPlaceholders = [
            XG_ACCESS_ID: "2100279540",
            XG_ACCESS_KEY: "A51MF2N9C2IR",
            HW_APPID: "100243781"
        ]
        packagingOptions{
            doNotStrip '*/mips/*.so'
            doNotStrip '*/mips64/*.so'
        }
    }

    dexOptions {
        javaMaxHeapSize "2g"
    }

    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            output.outputFile = new File(
                    output.outputFile.parent,
                    output.outputFile.name.replace("app", "meet"))
        }
    }

    signingConfigs {
        debugConfig {
            storeFile file("../keystores/debug.keystore")
            storePassword "******"
            keyAlias "******"
            keyPassword "******"
        }

        releaseConfig {
            storeFile file("../keystores/meet.keystore")
            storePassword "******"
            keyAlias "******"
            keyPassword "******"
        }
    }

    allprojects {
        afterEvaluate { project ->
            def propsFile = rootProject.file('keystores/debugkeystore.properties')
            def configName = 'debugConfig'

            if (propsFile.exists() && android.signingConfigs.hasProperty(configName)) {
                def props = new Properties()
                props.load(new FileInputStream(propsFile))
                android.signingConfigs[configName].storePassword = props['storePassword']
                android.signingConfigs[configName].keyAlias = props['keyAlias']
                android.signingConfigs[configName].keyPassword = props['keyPassword']
            }

            propsFile = rootProject.file('keystores/meetkeystore.properties')
            configName = 'releaseConfig'

            if (propsFile.exists() && android.signingConfigs.hasProperty(configName)) {
                def props = new Properties()
                props.load(new FileInputStream(propsFile))
                android.signingConfigs[configName].storePassword = props['storePassword']
                android.signingConfigs[configName].keyAlias = props['keyAlias']
                android.signingConfigs[configName].keyPassword = props['keyPassword']
            }
        }
    }

    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86"
        }
    }

    sourceSets {
        main {
            res.srcDirs = ['src/main/res', 'src/main/res_rct', 'src/main/res_umeng']
            assets.srcDirs = ['src/main/assets', 'src/main/assets_rct']
        }

    }

    buildTypes {

        debug {
            signingConfig signingConfigs.debugConfig

            //signingConfig signingConfigs.releaseConfig

            versionNameSuffix getDate()
        }

        release {
            minifyEnabled enableProguardInReleaseBuilds

            signingConfig signingConfigs.releaseConfig

            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }

    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            def versionCodes = ["armeabi-v7a": 1, "x86": 2]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }
        }
    }
}


dependencies {
    compile project(':react-native-fs')
    compile project(':react-native-fast-crypto')
    compile project(':react-native-vector-icons')
    compile project(':react-native-measure-text')
    compile project(':react-native-image-crop-picker')
    compile project(':react-native-view-shot')
    compile project(':react-native-image-picker')
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile project(':react-native-xinge-push')
    compile project(':react-native-i18n')
    compile project(':react-native-device-info')
    compile project(':react-native-udp')
    compile project(':react-native-tcp')
    compile project(':react-native-os')
    compile project(':react-native-splash-screen')
    compile project(':react-native-randombytes')
    compile project(':react-native-svg')
    compile project(':react-native-linear-gradient')
    compile project(':react-native-camera')
    compile project(':react-native-qrcode-local-image')
    compile project(':react-native-exit-app')
    compile project(':react-native-touch-id')
    compile project(':react-native-webview')
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile "com.android.support:support-v4:$rootProject.androidSupportVersion"
    compile "com.android.support:appcompat-v7:$rootProject.androidSupportVersion"
    compile 'com.android.support:multidex:1.0.1'
    compile 'com.facebook.react:react-native:+'
    // From node_modules
    // From node_modules
    compile files('libs/SecurityEnvSDK-release-1.1.0.jar')
    compile files('libs/SocialSDK_facebook.jar')
    compile files('libs/SocialSDK_QQ_Simplify.jar')
    compile files('libs/SocialSDK_Sina_Simplify.jar')
    compile files('libs/SocialSDK_twitter.jar')
    compile files('libs/SocialSDK_WeChat_Simplify.jar')
    compile files('libs/umeng_shareboard_widget.jar')
    compile files('libs/umeng_social_api.jar')
    compile files('libs/umeng_social_net.jar')
    compile files('libs/umeng_social_shareboard.jar')
    compile files('libs/umeng_social_shareview.jar')
    compile files('libs/umeng_social_tool.jar')
    compile files('libs/utdid4all-1.1.5.3_proguard.jar')
    compile files('libs/umeng-analytics-7.4.0.jar')
    compile files('libs/umeng-common-1.4.0.jar')
    compile 'com.tencent.bugly:crashreport:latest.release'
    //其中latest.release指代最新Bugly SDK版本号，也可以指定明确的版本号，例如2.1.9
    compile 'com.tencent.bugly:nativecrashreport:latest.release'
    //其中latest.release指代最新Bugly NDK版本号，也可以指定明确的版本号，例如3.0
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}


static def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyMMdd')

    return "." + formattedDate + "";
}
